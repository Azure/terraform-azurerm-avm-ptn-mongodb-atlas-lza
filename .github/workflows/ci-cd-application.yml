name: Deploy Applications' code

on:
  workflow_dispatch:
    inputs:
        deploy_mongoatlasmetrics:
          description: 'Deploy MongoAtlasMetrics Function App (Requires Infrastructure step deployed)'
          required: false
          default: true
          type: boolean
        deploy_webapp:
          description: 'Deploy Test DB Connection App (Optional - Requires Infrastructure & App steps deployed)'
          required: false
          default: false
          type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  mongoatlasmetrics-dev:
    name: mongoatlasmetrics-dev
    if: ${{ always() && inputs.deploy_mongoatlasmetrics }}
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_FUNCTIONAPP_NAME: ${{ vars.FUNCTION_APP_NAME }}
      AZURE_FUNCTIONAPP_PACKAGE_PATH: MongoAtlasMetrics/MongoAtlasMetrics
      DOTNET_VERSION: '8.0.x'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4
      - name: Setup dotnet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'Publish project'
        run: |
          pushd "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
          dotnet publish --configuration Release --output ./publish
          popd
          cd "${{ github.workspace }}/${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/publish"
          zip -r "${{ github.workspace }}/publish.zip" * .azurefunctions
      - name: 'Azure CLI login'
        uses: azure/login@v2.1.0
        with:
          client-id: ${{ vars.ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
      - name: 'Deploy to Azure Function App (OneDeploy)'
        run: |
          az functionapp deployment source config-zip \
            --resource-group ${{ vars.INFRA_RG_NAME }} \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --src "${{ github.workspace }}/publish.zip"

  webapp-dev:
    name: webapp-dev
    if: ${{ always() && inputs.deploy_webapp }}
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_WEBAPP_PACKAGE_PATH: test-db-connection/test-pe-db-connection/test-pe-db-connection
      DOTNET_VERSION: '8.0.x'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Publish project'
        run: |
          pushd "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
          dotnet publish --configuration Release --output ./publish
          popd
          cd "${{ github.workspace }}/${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish"
          zip -r "${{ github.workspace }}/publish-webapp.zip" *

      - name: 'Azure CLI login'
        uses: azure/login@v2.1.0
        with:
          client-id: ${{ vars.ARM_CLIENT_ID }}
          tenant-id: ${{ vars.ARM_TENANT_ID }}
          subscription-id: ${{ vars.ARM_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false

      - name: Deploy to Azure Web App
        run: |
          for item in $(echo "${{ vars.APP_WEBAPPS }}" | tr ',' ' '); do
            echo "Processing $item"
            az webapp deploy \
            --resource-group ${{ vars.APP_RG_NAME }} \
            --name $item \
            --src-path "${{ github.workspace }}/publish-webapp.zip" \
            --type zip
          done